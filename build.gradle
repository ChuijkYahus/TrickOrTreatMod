buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
        classpath "org.spongepowered:mixingradle:${project.mixingradle_version}"
        classpath "org.parchmentmc:librarian:${project.librarian_version}"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

mixin {
    add sourceSets.main, "${project.mod_id}.refmap.json"
}


archivesBaseName = project.mod_id
version = "${project.minecraft_version}-${project.mod_version}".toString()
group = project.maven_group+"."+archivesBaseName

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    if(project.parchment_enabled == "true"){
        mappings channel: 'parchment', version: "${project.parchment_version}-${project.minecraft_version}"
    }else{
        mappings channel: 'official', version: "${project.minecraft_version}"
    }

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {

            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=${project.mod_id}.mixins.json".toString()

            workingDirectory project.file('run')

            // Recommendedo logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

        }

        server {

            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=${project.mod_id}.mixins.json".toString()

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

        }

        data {

            //run data mixins?
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', "${project.mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]   //args "--mod", "usefulbackpacks", "--all", "--output", "\"" + file("src/generated/resources").toString() + "\"", "--validate", "--existing", "\"" + sourceSets.main.resources.srcDirs[0] + "\""

        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {

    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    implementation fg.deobf("curse.maven:serene-seasons-291874:3693807")
    //implementation fg.deobf("curse.maven:map-atlases-forge-519759:3641038")


}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "${projectDir}",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${project.mod_id}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
            allowInsecureProtocol = true
        }
    }
}



repositories {
    maven {
        url "https://www.cursemaven.com"
        allowInsecureProtocol = true
    }
}


// Loads files in the format {modid}-{version}.jar, MC version optional but picky about hyphens.
// See the regex pattern.
def getModVersion(filename) {
    // println(filename);
    def pattern = /^(?<modid>[^-]+)(?:-(?<mcversion>[0-9.]+))?(?:-(?<modver>[0-9.\-]+))\.jar$/;

    def matcher = filename =~ pattern

    def found = matcher.find()

    if(found) {
        def mod = matcher.group("modid");

        // Extract MC version or default
        def mcVersion = matcher.group("mcversion");

        // Extract mod version
        def version = matcher.group("modver");

        // println("> mod: ${mod}; mc: ${mcVersion}; version: ${version}");

        if(mcVersion == null)
            return "${mod}:${mod}:${version}";
        else
            return "${mod}:${mod}-${mcVersion}:${version}";

    } else {
        println(" > not a mod filenamea ")
        return filename;
    }
}

def dev_mods_dir = "mods"

repositories {
    // Built mods
    flatDir {
        dirs dev_mods_dir
    }

    // Other repositories (standard build gradle)
}

def dev_mods = fileTree(dev_mods_dir).filter { it -> it.isFile() }.files.name.collect( { getModVersion(it) } )

dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'

    //mixin stuff fore gradle 5+
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"

    // Snip: Minecraft dependencies, Forge

    // Deobfuscate each dev mod for runtime
    dev_mods.each {
        compileOnly fg.deobf(it)
        runtimeOnly fg.deobf(it)
    }

    // Other standard gradle dependencies

}
